/*******************************************************************************
 *
 * Pentaho Big Data
 *
 * Copyright (C) 2002-2017 by Hitachi Vantara : http://www.pentaho.com
 *
 *******************************************************************************
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/

package org.pentaho.runtime.test.test.impl;

import org.pentaho.runtime.test.RuntimeTest;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 * Created by bryan on 8/11/15.
 */
public abstract class BaseRuntimeTest implements RuntimeTest {
  private final Class<?> classUnderTest;
  private final String module;
  private final String id;
  private final String name;
  private final boolean configInitTest;
  private final Set<String> dependencies;

  public BaseRuntimeTest( Class<?> classUnderTest, String module, String id, String name, Set<String> dependencies ) {
    this( classUnderTest, module, id, name, false, dependencies );
  }

  public BaseRuntimeTest( Class<?> classUnderTest, String module, String id, String name, boolean configInitTest,
                          Set<String> dependencies ) {
    this.classUnderTest = classUnderTest;
    this.module = module;
    this.id = id;
    this.name = name;
    this.configInitTest = configInitTest;
    this.dependencies = Collections.unmodifiableSet( new HashSet<>( dependencies ) );
  }

  @Override public boolean accepts( Object objectUnderTest ) {
    return classUnderTest.isInstance( objectUnderTest );
  }

  @Override public String getModule() {
    return module;
  }

  @Override public String getId() {
    return id;
  }

  @Override public String getName() {
    return name;
  }

  @Override public Set<String> getDependencies() {
    return dependencies;
  }

  @Override public boolean isConfigInitTest() {
    return configInitTest;
  }

  //OperatorWrap isn't helpful for autogenerated methods
  //CHECKSTYLE:OperatorWrap:OFF
  @Override public String toString() {
    return "BaseRuntimeTest{" +
      "module='" + module + '\'' +
      ", id='" + id + '\'' +
      ", getName='" + name + '\'' +
      ", configInitTest=" + configInitTest +
      ", dependencies=" + dependencies +
      '}';
  }
  //CHECKSTYLE:OperatorWrap:ON
}
