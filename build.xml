<!--===========================================================================
  This is the build file for the Pentaho Big Data Project
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See subfloor.xml for more details
============================================================================-->
<project name="Pentaho Big Data Plugin" basedir="." default="dist"
	xmlns:ivy="antlib:org.apache.ivy.ant" >
	
	<description>
	  This build file is used to create the Pentaho Big Data Plugin project
		and works with the subfloor.xml file.
	</description>

	<!-- Import the common_build.xml file which contains all the default tasks -->	
	<import file="build-res/subfloor-pkg.xml"/>

  <property name="stage.pmr.dir" value="${basedir}/stage-pmr"/>
  <property name="pmr.archive.name" value="pentaho-mapreduce-libraries"/>
  
  <property name="resolve.shims.dir" value="${bin.dir}/shims"/>
  <property name="stage.shims.dir" value="${stage.dir}/${ivy.artifact.id}/hadoop-configurations"/>
  
	<property name="pdi-with-plugin"
					value="pdi-ce-big-data"
					description="Name of the pdi distribution with Big Data plugin"/>

	<property name="plugin.destination" location="kettle-dist" />
	
	<property name="samples.dir" value="${basedir}/samples" />
	
	<property name="package-samples.artifact.ivyfile"
	            value="package-samples-ivy.xml"
	            description="The ivy file defining dependencies of the package" />
    <property name="package-samples.artifact.pomfile"
                value="package-samples-pom.xml"
                description="The Maven pom file defining dependencies of the package" />
  
  <!--
    AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
    THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
    FOUND IN subfloor.xml.
  --> 

  <target name="resolve" depends="subfloor.resolve,resolve-pmr"/>

  <target name="clean-pmr">
    <delete dir="${stage.pmr.dir}"/>
  </target>

  <target name="resolve-pmr" depends="install-ivy">
    <delete dir="${stage.pmr.dir}/lib"/>
    <ivy:resolve file="${ivyfile}" conf="default" />
    <ivy:retrieve conf="pmr" pattern="${stage.pmr.dir}/lib/[module]-[revision](-[classifier]).[ext]" symlink="true" />
  </target>
  
  <target name="resolve-hadoop-shims" depends="install-ivy">
    <delete dir="${resolve.shims.dir}"/>
    <ivy:resolve file="${ivyfile}" conf="default" />
    <ivy:retrieve conf="shim" pattern="${resolve.shims.dir}/[module]-[revision](-[classifier]).[ext]" symlink="true" />
  </target>

	<target name="dist-noresolve" depends="jar,hbase-custom-comparators-jar,package" description="Builds and packages the application" />
	<target name="dist" depends="build-shims,resolve,jar,hbase-custom-comparators-jar,package" description="Builds and packages the application" />

  <target name="clean-all" depends="subfloor.clean-all,clean-pmr,clean-all-shims" />

	<target name="clean-dist">
		<delete dir="${dist.dir}" />
		<delete dir="${stage.dir}" />
		<delete dir="${platform.unzip.dir}" />
	</target>

  <target name="clean-all-shims" description="Clean all shim projects">
    <ant antfile="shims/build.xml" inheritall="false" target="clean-all" />
  </target>

  <!-- Build all the shim modules -->
  <target name="build-shims" description="Build all shim projects (dist and publish-local)">
    <ant antfile="shims/build.xml" inheritall="false">
      <target name="resolve" />
      <target name="dist" />
      <target name="publish-local" />
    </ant>
  </target>

  <!-- Publish all the shim modules -->
  <target name="publish-shims" description="Publishes all shim projects. build-shims should be called previous to this.">
    <ant antfile="shims/build.xml" target="publish" inheritall="false"/>
  </target>

  <!-- Test all the shim modules -->
  <target name="test-shims" description="Tests all shim projects. build-shims should be called previous to this.">
    <ant antfile="shims/build.xml" target="test" inheritall="false"/>
  </target>

  <!-- Generate code coverage for the shim modules -->
  <target name="cobertura-shims" description="Run cobertura on all shim projects. build-shims should be called previous to this.">
    <ant antfile="shims/build.xml" target="cobertura" inheritall="false"/>
  </target>

  <!-- Perform cobertura shim coverage in addition to our coverage -->
  <target name="cobertura" depends="cobertura-shims,subfloor.cobertura" />

  <!-- HACK! Include the Hadoop 0.20.x compatible mapred jar on the test
  classpath so we can properly test the MapReduce implementation without having 
  to publish the special mapred jar just for the sake of depending on it here
  for our tests. In reality, we should publish that jar and properly depend on it via Ivy -->
  <path id="test.classpath">
    <fileset dir="${devlib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${testlib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <pathelement path="${testclasses.dir}" />
    <pathelement path="${classes.dir}" />
    <pathelement path="${basedir}/shims/hadoop-20/bin/classes-mapred"/>
  </path>

  <target name="assemble.init">
    <mkdir dir="${stage.dir}" />
    <mkdir dir="${stage.dir}/${ivy.artifact.id}" />
  </target>

  <!-- Assemble the Hadoop Shim zips by first resolving them then extracting them
       into the package stage directory at hadoop-configurations/.
    -->
  <target name="assemble-hadoop-shims" depends="resolve-hadoop-shims">
    <delete dir="${stage.shims.dir}"/>
    <!-- <mkdir dir="${stage.shims.dir}"/> -->
    <unzip dest="${stage.shims.dir}">
      <fileset dir="${resolve.shims.dir}">
        <include name="*.zip"/>
      </fileset>
    </unzip>
  </target>
  
  <!-- Assemble all libraries required for Pentaho MapReduce into the ${pmr.archive.name}.zip file in the staging directory -->
  <target name="assemble-pmr-libraries">
    <!-- Archive must contain a top level lib/ directory -->
    <zip destfile="${stage.dir}/${ivy.artifact.id}/${pmr.archive.name}.zip">
      <zipfileset dir="${stage.pmr.dir}/lib" prefix="lib"/>
    </zip>
  </target>
	
	  <target name="assemble.copy-libs" depends="assemble-pmr-libraries,assemble-hadoop-shims">
	    <copy todir="${stage.dir}/${ivy.artifact.id}/lib">
	      <fileset dir="${lib.dir}">
			<exclude name="kettle-*.jar" />
			<exclude name="pentaho-xul-*.jar" />
			<exclude name="metro-*.jar" />
			<exclude name="log4j-*.jar" />
			<exclude name="jface*.jar" />
			<exclude name="jets3t-*.jar" />
			<exclude name="hadoop-*.jar" />
			<exclude name="hbase-*.jar" />
			<exclude name="zookeeper-*.jar" />
			<exclude name="jug-*.jar" />
			<exclude name="commons-codec*.jar" />
			<exclude name="commons-io*.jar" />
			<exclude name="commons-lang*.jar" />
			<exclude name="commons-logging*.jar" />
			<exclude name="commons-vfs*.jar" />
			<!-- <exclude name="pentaho-hdfs-vfs*.jar" /> -->
			<!-- <exclude name="pentaho-s3-vfs*.jar" /> -->
			<exclude name="pentaho-vfs-browser*.jar" />
			<exclude name="scannotation*.jar" />
			<exclude name="dom4j*.jar" />	      	
			<exclude name="jface*.jar" />	      	
			<exclude name="x86*.jar" />	      	
          </fileset>
	    </copy>
	    <copy todir="${stage.dir}/${ivy.artifact.id}">
	      <fileset file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
	    </copy>
	  </target>

	<!-- this target builds a kettle release that includes the plugin -->
	<target name="kettle-w-plugin-dist">
    <property name="pdi-dist-root" value="${bin.dir}/kettle-dist/${kettle-distrib-with-plugin-name}"/>
    <delete dir="${bin.dir}/kettle-dist" />
    <!-- Unzip PDI CE -->
		<untar compression="gzip" dest="${pdi-dist-root}" src="${kettle.dist.dir}/${kettle-distrib-artifact-name}.tar.gz"/>
    <!-- Unzip plugin -->
		<unzip src="${dist.dir}/${package.basename}.zip" dest="${pdi-dist-root}/data-integration/plugins"/>
    <!-- Unzip samples -->
    <unzip src="${dist.dir}/${ivy.artifact.id}-samples-${project.revision}.zip" dest="${pdi-dist-root}/data-integration/samples" />

    <tar destfile="${dist.dir}/${kettle-distrib-with-plugin-name}.tar.gz" longfile="gnu" compression="gzip">
      <tarfileset dir="${bin.dir}/kettle-dist" mode="755" excludes="docs/api/** docs/api-core/** **/Thumbs.db">
        <include name="**/*.sh" />
        <include name="**/JavaApplicationStub" />
      </tarfileset>
      <tarfileset dir="${bin.dir}/kettle-dist" excludes="docs/api/** docs/api-core/** **/Thumbs.db">
        <exclude name="**/*.sh" />
        <exclude name="**/JavaApplicationStub" />
      </tarfileset>
    </tar>
    <!-- Zip up new PDI CE with Pentaho Big Data Plugin and Samples -->
		<zip destfile="${dist.dir}/${kettle-distrib-with-plugin-name}.zip">
			<zipfileset dir="${bin.dir}/kettle-dist" filemode="755">
        <include name="**/*.sh" />
        <include name="**/JavaApplicationStub" />
      </zipfileset>
      <zipfileset dir="${bin.dir}/kettle-dist">
        <exclude name="**/*.sh" />
        <exclude name="**/JavaApplicationStub" />
      </zipfileset>
		</zip>
	</target>
	
	<target name="install-plugin" depends="jar,package" description="Build the plugin and extract it into ${kettle.dist.dir}/plugins">
		<!-- Install the plugin -->
		<delete dir="${kettle.dist.dir}/plugins/pentaho-big-data-plugin"/>
		<unzip dest="${kettle.dist.dir}/plugins">
			<fileset file="${dist.dir}/${package.basename}.zip"/>
		</unzip>

		<!-- Install samples -->
		<delete dir="${kettle.dist.dir}/samples/job/hadoop"/>
		<unzip dest="${kettle.dist.dir}/samples">
			<fileset file="${dist.dir}/${ivy.artifact.id}-samples-${project.revision}.zip"/>
		</unzip>
	</target>
	
	<target name="publish-local-nojar" depends="install-ivy,subfloor.publish-local-nojar">
	  <ivy:resolve file="${package.artifact.ivyfile}" />
	  <ivy:publish resolver="local" pubrevision="${project.revision}" overwrite="true" forcedeliver="true">
		<artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]" />
	  </ivy:publish>
	  <ivy:resolve file="${package-samples.artifact.ivyfile}" />
	  <ivy:publish resolver="local" pubrevision="${project.revision}" overwrite="true" forcedeliver="true">
	    <artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]" />
	  </ivy:publish>
	</target>
	
	<target name="publish-nojar" depends="subfloor-pkg.publish-nojar">
      <antcall target="maven-publish-artifact">
        <param name="publish.pomFile" value="${package-samples.artifact.pomfile}" />
        <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-samples-${project.revision}.zip" />
      </antcall>
    </target>

  <!-- Publish shims at the same time as publishing ourself -->
  <target name="publish" depends="publish-shims,subfloor.publish" />

	<target name="create-package-pom"
	          depends="install-ivy,subfloor-pkg.create-package-pom"
	          description="Creates a POM file based on the ivy dependencies for a separate package">
      <ivy:makepom ivyfile="${package-samples.artifact.ivyfile}" pomfile="${package-samples.artifact.pomfile}" />
      <replace file="${package-samples.artifact.pomfile}" token="jar" value="zip" />
    </target>
	
	<target name="package" depends="subfloor-pkg.package">
		<zip destfile="${dist.dir}/${ivy.artifact.id}-samples-${project.revision}.zip" basedir="${samples.dir}" />
	</target>

        <target name="hbase-custom-comparators-jar" 
                depends="compile" 
                description="Jars up the custom comparators for use in filtering signed and boolean column values in HBase">
          <jar destfile="${lib.dir}/pentaho-hbase-comparators-${project.revision}.jar">
            <fileset dir="${classes.dir}" includes="**/*Comparator*"/>
          </jar>
        </target>

	
</project>
